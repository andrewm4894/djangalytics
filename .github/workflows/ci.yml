name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run Django system check
      run: uv run python manage.py check
    
    - name: Run migrations check
      run: uv run python manage.py makemigrations --check --dry-run
    
    - name: Run Django tests
      run: uv run python manage.py test analytics --verbosity=2
    
    - name: Run coverage
      run: |
        uv run coverage run --source='.' manage.py test analytics
        uv run coverage report
        uv run coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Run Python linting
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check Python formatting
      run: |
        uv run black . --check
        uv run isort . --check-only
    
    - name: Run security checks
      run: uv run bandit -r . -x */tests/*,*/migrations/*,*/.venv/*,*/venv/*,*/frontend/*,*/example-apps/*
    
    - name: Run frontend linting
      run: cd frontend && npm run lint
    
    - name: Check frontend formatting
      run: cd frontend && npm run format:check

  demo-games-test:
    name: Demo Games Integration
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Start backend server
      run: |
        uv run python manage.py migrate
        uv run python manage.py runserver &
        sleep 10
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/api/stats/ || exit 1
        echo "✅ API endpoints responding"
    
    - name: Verify demo games files
      run: |
        test -f example-apps/snake-game/index.html || exit 1
        test -f example-apps/flappy-hedgehog/index.html || exit 1
        echo "✅ Demo games files present"

  security-scan:
    name: Security Scan  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'